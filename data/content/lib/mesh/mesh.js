// Generated by CoffeeScript 1.6.3
(function() {
  var mesh;

  mesh = angular.module('Mesh', ['ui']);

  mesh.value('ui.config', {
    codemirror: {
      mode: 'text/javascript',
      theme: 'monoguy',
      lineNumbers: true,
      matchBrackets: true
    }
  });

  mesh.directive('ngEnter', function() {
    return function(scope, element, attrs) {
      return element.bind("keypress", function(event) {
        if (event.which === 13) {
          return scope.$apply(attrs.ngEnter);
        }
      });
    };
  });

  mesh.factory('editor', function($window) {
    var editor;
    editor = {};
    editor.open = function(file, handler) {
      var mimetype;
      mimetype = $window.app.mime.lookup(file);
      return $window.app.fs.readFile(file, {
        encoding: 'utf8'
      }, function(err, data) {
        if (err) {
          throw err;
        }
        return handler({
          mime: mimetype,
          path: file,
          content: data.toString('utf8')
        });
      });
    };
    return editor;
  });

  mesh.controller('FileManagerController', [
    '$scope', 'shell', 'editor', function($scope, shell, editor) {
      $scope.shell = shell;
      $scope.editor = editor;
      $scope.grid = [[[], []], [[], []]];
      $scope.editors = {};
      $scope.focused_row = 0;
      $scope.focused_col = 0;
      return $scope.$on('edit_file', function(event, path, row, col) {
        console.log(path, row, col);
        if ($scope.editors[path]) {
          return console.log("FileManagerController file already open!!!");
        } else {
          $scope.focused_row = row;
          $scope.focused_col = col;
          return $scope.editor.open(path, function(file_proxy) {
            return $scope.$apply(function() {
              var cell;
              cell = $scope.grid[$scope.focused_row][$scope.focused_col];
              cell.push(file_proxy);
              $scope.editors[path] = {
                row: $scope.focused_row,
                col: $scope.focused_col
              };
              return console.log("FileManagerController apply file open", file_proxy);
            });
          });
        }
      });
    }
  ]);

  mesh.factory('shell', function($window) {
    var clear_history, direct_exec, externals, internals, open_project, peruse, shell;
    shell = {};
    externals = {
      cd: true,
      ls: true,
      cwd: true,
      pwd: true,
      test: true
    };
    peruse = function(query) {
      var e, out, path;
      path = $window.app.shell.pwd();
      out = $window.app.shell.find(path).filter(function(file) {
        return file.match(RegExp(query));
      });
      if (e = $window.app.shell.error()) {
        return {
          code: 1,
          output: [e]
        };
      } else {
        return {
          code: 0,
          output: out,
          openable: true
        };
      }
    };
    open_project = function(path) {
      var e, res;
      res = $window.app.shell.cd(path);
      e = $window.app.shell.error();
      if (e === null) {
        return {
          code: 0,
          output: ["project opened"]
        };
      } else {
        return {
          code: 1,
          output: [e]
        };
      }
    };
    clear_history = function() {
      return {
        code: 255,
        output: []
      };
    };
    internals = {
      p: peruse,
      ch: clear_history,
      op: open_project
    };
    direct_exec = function(callable, params) {
      var e, result;
      result = callable(params);
      if (typeof result === 'string') {
        result = Array(result);
      }
      e = $window.app.shell.error();
      if (e === null) {
        return {
          code: 0,
          output: result
        };
      } else {
        return {
          code: 1,
          output: [e]
        };
      }
    };
    shell.raw = function() {
      return $window.app.shell;
    };
    shell.exec = function(command, handler) {
      var callable, child, cmd, on_data, params, parts;
      if (command.length === 0) {
        return false;
      }
      parts = command.split(/\s+/);
      cmd = parts.shift();
      params = parts.join(' ');
      callable = internals[cmd] || externals[cmd];
      if (angular.isFunction(callable)) {
        return handler(callable(params));
      } else if (callable) {
        callable = $window.app.shell[cmd];
        return handler(direct_exec(callable, params));
      } else {
        child = $window.app.shell.exec(command, {
          async: true
        });
        on_data = function(data) {
          var arr, str;
          str = data.toString();
          arr = str.split(/\r?\n/);
          return handler({
            code: 0,
            output: arr
          });
        };
        child.stdout.on('data', on_data);
        return child.stderr.on('data', on_data);
      }
    };
    return shell;
  });

  mesh.controller('ShellController', [
    '$scope', 'shell', function($scope, shell) {
      $scope.shell = shell;
      $scope.history = [];
      $scope.current = null;
      $scope.command = '';
      $scope.cwd = '';
      $scope.open_file = function(event) {
        var col, path, row;
        path = event.target.innerText;
        if (!Boolean($scope.current.openable)) {
          return false;
        }
        if ($scope.shell.raw().test('-d', path)) {
          return false;
        }
        console.log("ShellController shell.open_file path", path, event);
        col = Number(event.ctrlKey);
        row = Number(event.shiftKey);
        return $scope.$parent.$broadcast("edit_file", path, row, col);
      };
      return $scope.process_cmd = function() {
        var cmd;
        cmd = "" + $scope.command;
        return $scope.shell.exec(cmd, function(result) {
          switch (result.code) {
            case 255:
              $scope.command = '';
              $scope.history = [];
              return $scope.current = {};
            case 0:
              $scope.command = '';
              $scope.history.push($scope.current);
              if (cmd === "pwd") {
                $scope.cwd = result.output[0];
              }
              return $scope.current = {
                request: cmd,
                response: result.output,
                openable: result.openable
              };
          }
        });
      };
    }
  ]);

}).call(this);
